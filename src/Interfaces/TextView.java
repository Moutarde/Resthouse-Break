package Interfaces;import Games.*;import java.util.Observable;import java.util.Observer;/** * TextView is a textual view of the Zuul game. It prints out texts to the  * screen. *  * @author Charlet Pierre, Kniebihler Nicolas, Provost Kevin * @version  1.0 (February 2005) */public class TextView implements Observer{    private GameModel gameModel;    private UserInterface gui;    /**     * Constructor for objects of class TextView.     */    public TextView(GameModel gameModel)    {        this.gameModel = gameModel;    } //TextView(.)        /**     * Initialises the user interface, and print out     * the opening message for the player.     */    public void setGUI(UserInterface userInterface)    {        gui = userInterface;        printWelcome();    } //setGUI(.)        /**     * Print out the opening message for the player.     */    public void printWelcome()    {        show("\n" + gameModel.getWelcomeString() + "\n");        printLocationInfo();    } //printWelcome()        /**     * Print out the location informations.     */    private void printLocationInfo()    {        show(gameModel.getLocationInfo());    } //printLocationInfo()        /**     * Print out the ending message for the player.     */    public void printGoodBye()     {        show(gameModel.getGoodByeString());    } //printGoodBye()        /**     * Print out the help message for the player.     */    public void printHelp()    {        show(gameModel.getHelpString());    } //printHelp()        /**     * Print out the description of the current room,     * when the player enters the command "voir".     */    public void printVoir()    {        show(gameModel.getVoirString());    } //printVoir()        /**     * Print out a strange message when the player     * enters the command "manger".     */    public void printManger()    {        show(gameModel.getMangerString());    } //printManger()         /**     * Print out a strange message when the player     * enters the command "utiliser".     */    public void printuse(String item)    {        show(gameModel.getuseString(item));    } //printuse()       /**     *      */    public void printToHelp()    {        show(gameModel.getToHelpString());    } //printToHelp()        /**     * Print out the message that informs the player that he has taken the item.     */    public void printTakeItem(String item)    {        show(gameModel.getTakeItemString(item));    } //printTakeItem(.)        /**     * Print out the message that informs the player that he has dropen the item.     */    public void printDropItem(String item)    {        show(gameModel.getDropItemString(item));    } //printDropItem(.)        /**     * Print out the message that informs the player that he has bought the item.     */    public void printBuyItem(String item)    {        show(gameModel.getBuyItemString(item));    } //printBuyItem(.)        /**     * Print out the weight the player is carrying.     */    public void printCarriedWeight(int weight)    {        show(gameModel.getCarriedWeightString(weight));    } //printCarriedWeight(.)        /**     * Print out the number of teeth the player has.     */    public void printTeethNb(int teeth)    {        show(gameModel.getTeethNbString(teeth));    } //printCarriedWeight(.)        /**     * Print out a message that informs the player that he has eaten the item.     */    public void printEat(String item)    {        show(gameModel.getEatString(item));    } //printEat(.)         /**     * Print out a message that informs the player that he has use the item.     */    public void printuseItem()    {        show(gameModel.getuseItemString());    } //printEat(.)       /**     * Print into the text area the string given in parameter.     */    public void show(String string)     {        gui.println(string);    } //show(.)       /**     * Print out the current room's description     * when the player changes rooms.     */    public void update(Observable o, Object arg)    {        printLocationInfo();    } //update(.)} //TextView